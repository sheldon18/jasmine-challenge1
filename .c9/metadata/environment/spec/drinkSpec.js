{"changed":true,"filter":false,"title":"drinkSpec.js","tooltip":"/spec/drinkSpec.js","value":"describe(\"My whatCanIDrink function\", function() {\n    // A test suite begins with a call to the global Jasmine function describe with two parameters: a string and a function.\n    beforeEach(function() {\n        drink = new whatCanIDrink();\n    });\n    \n    describe(\"Checks age\", function() {\n        // Specs are defined by calling the global Jasmine function it\n        it(\"should exist\", function() {\n            // Expectations are built with the function expect which takes a value, called the actual.\n            // Each matcher implements a boolean comparison between the actual value and the expected value.\n            // Any matcher can evaluate to a negative assertion by chaining the call to expect with a not before calling the matcher.\n            expect(whatCanIDrink).toBeDefined();\n        });\n        \n        it(\"should return drink toddy when called as whatCanIDrink(13)\", function() {\n            var result = whatCanIDrink(13)\n            expect(result).toBe(\"Drink Toddy\");\n        });\n        \n        \n        it(\"should return drink coke when called as whatCanIDrink(17)\", function() {\n            var result = whatCanIDrink(17)\n            expect(result).toBe(\"Drink Coke\");\n        });\n        \n        it(\"should return drink beer when called as whatCanIDrink(18)\", function() {\n            var result = whatCanIDrink(18)\n            expect(result).toBe(\"Drink Beer\");\n        });\n        \n        it(\"should return drink beer when called as whatCanIDrink(20)\", function() {\n            var result = whatCanIDrink(20)\n            expect(result).toBe(\"Drink Beer\");\n        }); \n        \n        it(\"should return drink whisky when called as whatCanIDrink(30)\", function() {\n            var result = whatCanIDrink(30)\n            expect(result).toBe(\"Drink Whisky\");\n        });\n        \n        it(\"should be unable to return a drink when called as whatCanIDrink(140)\", function() {\n            var result = whatCanIDrink(140)\n            expect(result).toBe(\"Sorry. I can’t tell what drink because that age is incorrect!\");\n        });\n        \n        it(\"should contain Drink when called as whatCanIDrink(17)\", function() {\n            var result = whatCanIDrink(10).indexOf(\"Drink\");\n            expect(result).not.toEqual(-1);\n        });\n    });\n});","undoManager":{"mark":15,"position":15,"stack":[[{"start":{"row":0,"column":0},"end":{"row":24,"column":3},"action":"insert","lines":["describe(\"Calculator\", function() {","    beforeEach(function() {","       calc = new Calculator; ","    });","    ","   ","    describe(\"Addition tests\", function() {","        it(\"should return 42\", function() {","            calc.add(20);","            calc.add(22);","            expect(calc.value).toBe(42);","        });","        it(\"should return 26\", function() {","            calc.add(7);","            calc.add(19);","            expect(calc.value).toBe(26);","        });","        it(\"should return an error if we dont supply two numbers\", function() {","            spyOn(window, \"alert\");","            calc.add(\"HitchHikers\");","            expect(window.alert).toHaveBeenCalledWith(\"Error!\");","            ","        });","    });","});"],"id":1}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":20},"action":"remove","lines":["Calculator"],"id":3},{"start":{"row":0,"column":10},"end":{"row":0,"column":23},"action":"insert","lines":["whatCanIDrink"]}],[{"start":{"row":2,"column":7},"end":{"row":2,"column":11},"action":"remove","lines":["calc"],"id":9},{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["a"]},{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["g"]},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["e"]}],[{"start":{"row":2,"column":17},"end":{"row":2,"column":27},"action":"remove","lines":["Calculator"],"id":12},{"start":{"row":2,"column":17},"end":{"row":2,"column":30},"action":"insert","lines":["whatCanIDrink"]}],[{"start":{"row":6,"column":14},"end":{"row":6,"column":28},"action":"remove","lines":["Addition tests"],"id":14},{"start":{"row":6,"column":14},"end":{"row":6,"column":27},"action":"insert","lines":["whatCanIDrink"]}],[{"start":{"row":7,"column":12},"end":{"row":7,"column":28},"action":"remove","lines":["should return 42"],"id":15},{"start":{"row":7,"column":12},"end":{"row":7,"column":73},"action":"insert","lines":["Sorry. I can’t tell what drink because that age is incorrect!"]}],[{"start":{"row":8,"column":12},"end":{"row":9,"column":25},"action":"remove","lines":["calc.add(20);","            calc.add(22);"],"id":16},{"start":{"row":8,"column":12},"end":{"row":8,"column":13},"action":"insert","lines":["a"]},{"start":{"row":8,"column":13},"end":{"row":8,"column":14},"action":"insert","lines":["g"]},{"start":{"row":8,"column":14},"end":{"row":8,"column":15},"action":"insert","lines":["e"]}],[{"start":{"row":8,"column":15},"end":{"row":8,"column":16},"action":"insert","lines":[" "],"id":17}],[{"start":{"row":8,"column":16},"end":{"row":8,"column":17},"action":"insert","lines":["<"],"id":18}],[{"start":{"row":8,"column":17},"end":{"row":8,"column":18},"action":"insert","lines":[" "],"id":19},{"start":{"row":8,"column":18},"end":{"row":8,"column":19},"action":"insert","lines":["0"]},{"start":{"row":8,"column":19},"end":{"row":8,"column":20},"action":"insert","lines":[";"]}],[{"start":{"row":9,"column":19},"end":{"row":9,"column":29},"action":"remove","lines":["calc.value"],"id":20},{"start":{"row":9,"column":19},"end":{"row":9,"column":20},"action":"insert","lines":["a"]},{"start":{"row":9,"column":20},"end":{"row":9,"column":21},"action":"insert","lines":["g"]},{"start":{"row":9,"column":21},"end":{"row":9,"column":22},"action":"insert","lines":["e"]}],[{"start":{"row":9,"column":29},"end":{"row":9,"column":31},"action":"remove","lines":["42"],"id":21},{"start":{"row":9,"column":29},"end":{"row":9,"column":30},"action":"insert","lines":["<"]}],[{"start":{"row":9,"column":30},"end":{"row":9,"column":31},"action":"insert","lines":[" "],"id":22},{"start":{"row":9,"column":31},"end":{"row":9,"column":32},"action":"insert","lines":["0"]}],[{"start":{"row":9,"column":30},"end":{"row":9,"column":31},"action":"remove","lines":[" "],"id":23}],[{"start":{"row":9,"column":29},"end":{"row":9,"column":30},"action":"remove","lines":["<"],"id":24}],[{"start":{"row":0,"column":0},"end":{"row":23,"column":3},"action":"remove","lines":["describe(\"whatCanIDrink\", function() {","    beforeEach(function() {","       age = new whatCanIDrink; ","    });","    ","   ","    describe(\"whatCanIDrink\", function() {","        it(\"Sorry. I can’t tell what drink because that age is incorrect!\", function() {","            age < 0;","            expect(age).toBe(0);","        });","        it(\"should return 26\", function() {","            calc.add(7);","            calc.add(19);","            expect(calc.value).toBe(26);","        });","        it(\"should return an error if we dont supply two numbers\", function() {","            spyOn(window, \"alert\");","            calc.add(\"HitchHikers\");","            expect(window.alert).toHaveBeenCalledWith(\"Error!\");","            ","        });","    });","});"],"id":26},{"start":{"row":0,"column":0},"end":{"row":51,"column":3},"action":"insert","lines":["describe(\"My whatCanIDrink function\", function() {","    // A test suite begins with a call to the global Jasmine function describe with two parameters: a string and a function.","    beforeEach(function() {","        drink = new whatCanIDrink();","    });","    ","    describe(\"Checks age\", function() {","        // Specs are defined by calling the global Jasmine function it","        it(\"should exist\", function() {","            // Expectations are built with the function expect which takes a value, called the actual.","            // Each matcher implements a boolean comparison between the actual value and the expected value.","            // Any matcher can evaluate to a negative assertion by chaining the call to expect with a not before calling the matcher.","            expect(whatCanIDrink).toBeDefined();","        });","        ","        it(\"should return drink toddy when called as whatCanIDrink(13)\", function() {","            var result = whatCanIDrink(13)","            expect(result).toBe(\"Drink Toddy\");","        });","        ","        ","        it(\"should return drink coke when called as whatCanIDrink(17)\", function() {","            var result = whatCanIDrink(17)","            expect(result).toBe(\"Drink Coke\");","        });","        ","        it(\"should return drink beer when called as whatCanIDrink(18)\", function() {","            var result = whatCanIDrink(18)","            expect(result).toBe(\"Drink Beer\");","        });","        ","        it(\"should return drink beer when called as whatCanIDrink(20)\", function() {","            var result = whatCanIDrink(20)","            expect(result).toBe(\"Drink Beer\");","        }); ","        ","        it(\"should return drink whisky when called as whatCanIDrink(30)\", function() {","            var result = whatCanIDrink(30)","            expect(result).toBe(\"Drink Whisky\");","        });","        ","        it(\"should be unable to return a drink when called as whatCanIDrink(140)\", function() {","            var result = whatCanIDrink(140)","            expect(result).toBe(\"Sorry. I can’t tell what drink because that age is incorrect!\");","        });","        ","        it(\"should contain Drink when called as whatCanIDrink(17)\", function() {","            var result = whatCanIDrink(10).indexOf(\"Drink\");","            expect(result).not.toEqual(-1);","        });","    });","});"]}],[{"start":{"row":13,"column":46},"end":{"row":13,"column":48},"action":"insert","lines":["\"\""],"id":31}],[{"start":{"row":9,"column":39},"end":{"row":9,"column":41},"action":"remove","lines":["13"],"id":31},{"start":{"row":9,"column":39},"end":{"row":9,"column":40},"action":"insert","lines":["8"]},{"start":{"row":9,"column":40},"end":{"row":9,"column":41},"action":"insert","lines":["8"]}],[{"start":{"row":9,"column":12},"end":{"row":9,"column":42},"action":"insert","lines":["var result = whatCanIDrink(13)"],"id":32}],[{"start":{"row":8,"column":39},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":33},{"start":{"row":9,"column":0},"end":{"row":9,"column":12},"action":"insert","lines":["            "]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":3,"column":20},"end":{"row":3,"column":33},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1560934905388}